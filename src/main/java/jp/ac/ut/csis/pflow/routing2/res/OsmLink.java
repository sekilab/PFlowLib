package jp.ac.ut.csis.pflow.routing2.res;

import java.util.List;

import jp.ac.ut.csis.pflow.geom.LonLat;

/**
 * Class for OSM link <br />
 * 
 * generated by osm2po ( http://osm2po.de/ )
 * 
 * @author People Flow Project, CSIS, UTokyo.
 */
public class OsmLink extends Link {
	/* ==============================================================
	 * static fields
	 * ============================================================== */
	/** Serial */	
	private static final long serialVersionUID = -337838600805670552L;
	
	/**
	 * road types(1-127)
	 */
	public static final int[] ROAD_TYPES = new int[128];
	static {
		for(int i=0;i<128;i++) { ROAD_TYPES[i] = i; }
	}
	
	
	/* ==============================================================
	 * instance fields
	 * ============================================================== */
	/** road class flag	*/	private int    _clazz;	// road type(0-127)
	/** road speed limit*/	private double _speed;

	
	/* ==============================================================
	 * constructors
	 * ============================================================== */
	/**
	 * create link instance
	 * @param linkid Link ID
	 * @param tailNode origin/tail node
	 * @param headNode destination/head node
	 * @param cost link cost
	 * @param revCost reverse cost
	 * @param oneway direction flag
	 * @param clazz road class flag
	 * @param speed speed
	 */
	public OsmLink(String linkid,Node tailNode,Node headNode,double cost,double revCost,boolean oneway,int clazz,double speed) {
		super(linkid,tailNode,headNode,cost,revCost,oneway);
		// additional parameters for OSM //////////////////
		_clazz = clazz;
		_speed = speed;
	}
	
	/**
	 * create link instance
	 * @param linkid Link ID
	 * @param tailNode origin/tail node
	 * @param headNode destination/head node
	 * @param cost link cost
	 * @param revCost reverse cost
	 * @param oneway direction flag
	 * @param clazz road class flag
	 * @param speed speed
	 * @param geom point list(head node must be first point of list)
	 */
	public OsmLink(String linkid,Node tailNode,Node headNode,double cost,double revCost,boolean oneway,int clazz,double speed,List<LonLat> geom) {
		super(linkid,tailNode,headNode,cost,revCost,oneway,geom);
		// additional parameters for OSM //////////////////
		_clazz = clazz;
		_speed = speed;
	}
	

	/* ==============================================================
	 * instance methods
	 * ============================================================== */
	/**
	 * get road class flag
	 * @return road class flag
	 */
	public int getRoadClass() { 
		return _clazz;
	}
	
	/**
	 * get speed (m/s)
	 * @return speed (m/s)
	 */
	public double getSpeed() { 
		return _speed;
	}
	
	/* @see jp.ac.ut.csis.pflow.routing2.res.Link#clone(jp.ac.ut.csis.pflow.routing2.res.Node, jp.ac.ut.csis.pflow.routing2.res.Node) */
	@Override
	public OsmLink clone(Node tailNode,Node headNode) {
		return new OsmLink(getLinkID(),tailNode,headNode,getCost(),getReverseCost(),isOneWay(),getRoadClass(),getSpeed(),getLineString());
	}
}
